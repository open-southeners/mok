# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Test, Build & Release

on:
  push:
    tags:
      - "**"

jobs:
  # @see https://stackoverflow.com/a/72959712/8179249
  check-current-branch:
    runs-on: ubuntu-latest

    outputs:
      branch: ${{ steps.check_step.outputs.branch }}

    steps:
      - name: 🏗 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗 Get current branch
        id: check_step
        run: |
          raw=$(git branch -r --contains ${{ github.ref }})
          branch="$(echo ${raw//origin\//} | tr -d '\n')"
          echo "{name}=branch" >> $GITHUB_OUTPUT
          echo "Branches where this tag exists : $branch."

  build:
    needs: check-current-branch

    strategy:
      matrix:
        # List of runners: https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
        runner:
          - name: "macos-latest"
            suffix: "darwin-arm64"

          - name: "macos-13"
            suffix: "darwin-amd64"

          - name: "ubuntu-latest"
            suffix: "linux-amd64"

          - name: "ubuntu-24.04-arm"
            suffix: "linux-arm64"

          - name: "windows-latest"
            suffix: "windows-amd64"

    runs-on: ${{ matrix.runner.name }}

    steps:
      - name: 🏗 Checkout code
        uses: actions/checkout@v4

      - name: 🏗 Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22"

      - name: 🏗 Build binary
        run: go build -o "${{github.repository}}-${{matrix.runner.suffix}}" -v

      - name: 🏗 Get release info
        id: query-release-info
        uses: release-flow/keep-a-changelog-action@v3
        with:
          command: query
          version: latest

      - name: 🚀 Publish to Github releases
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.query-release-info.outputs.release-notes }}
          make_latest: contains(${{ needs.check.outputs.branch }}, 'main')
          # prerelease: true
          fail_on_unmatched_files: true
          preserve_order: true
          files: ${{github.repository}}-*
